# -*- coding: utf-8 -*-
"""OMKAR_singh_Capstone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RG-rhttQWa4g4IsACnpTZaJycfvGmCBv
"""

from google.colab import drive
drive.mount('/content/gdrive')

!unzip /content/drive/MyDrive/damaged_car_dataset

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/car_dataset/index.csv')
df.head()

len(df)

import matplotlib.pyplot as plt
import seaborn as sns

"""Below code is for removing duplicate values in image column"""

bool_series = df.duplicated(subset = "image")
df = df[~bool_series]

len(df)

plt.figure(figsize=(14,5))
sns.countplot(df['class'])

"""Over 1/3 of the data is unknown. We will work only with known damaged classes

We will take only those images for which there is a corresponding .xml file available
"""

import os

annotate_dir_list = os.listdir('/content/drive/MyDrive/car_dataset/bounding_box_annotations')

annotate_dir__num_list = []
for i in range(len(annotate_dir_list)):
  annotate_dir__num_list.append(int(annotate_dir_list[i].split('.')[0]))

df_annotate = df.copy()
Check = [0 for i in range(len(df_annotate.index))]
df_annotate["Check"] = Check

for i in range(len(df_annotate.index)):
    temp = str(df_annotate["image"][i].split("/")[1].split(".")[0])
    if int(temp) in annotate_dir__num_list:
        df_annotate["Check"][i] = 1

df_1 = df_annotate[df_annotate['Check']==1]

len(df_1)

plt.figure(figsize=(14,5))
sns.countplot(df_1['class'])

df_1 = df[df['class']!='unknown']

plt.figure(figsize=(14,5))
sns.countplot(df_1['class'], hue=df['subset'])

"""All the classes have roughly equal validation data

In the code below the name of each class in the .xml files is changed to corresponding class name to make it suitable for tflite model
"""

import xml.etree.ElementTree as ET

path = "/content/drive/MyDrive/damaged_car_dataset/bounding_box_annotations"
dstpath = "/content/drive/MyDrive/damaged_car_dataset/annots"

for i in df_1.index:
  tree = ET.parse(path+'/'+str(i)+'.xml')
  root = tree.getroot()
  for node in root.iter('name'):
    node.text = df_1.loc[i]['class']
  save = dstpath+'/'+str(i)+'.xml'
  tree.write(save)



"""# Installing libraries and importing data"""

!pip install -q tflite-model-maker
!pip install -q tflite-support

import numpy as np
import os

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

from tflite_support import metadata

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

CLASSES = ['head_lamp', 'door_scratch', 'glass_shatter', 'tail_lamp', 'bumper_dent', 'door_dent', 'bumper_scratch']

train_data = object_detector.DataLoader.from_pascal_voc(
    '/content/drive/MyDrive/car_dataset/train',
    '/content/drive/MyDrive/car_dataset/train',
     CLASSES
)

val_data = object_detector.DataLoader.from_pascal_voc(
    '/content/drive/MyDrive/car_dataset/val',
    '/content/drive/MyDrive/car_dataset/val',
     CLASSES
)

"""# Model training

**Efficientdet 1**
"""

# defining the model
spec = model_spec.get('efficientdet_lite1')

model = object_detector.create(train_data,
                               model_spec=spec,
                               batch_size=16,
                               train_whole_model=True,
                               epochs=50,
                               validation_data=val_data)

# evaluating the model
model.evaluate(val_data)

0.22263119

MODEL_PATH = '/content/drive/MyDrive/car_dataset/car_damage_detection_model'
MODEL_NAME = 'car_damage_detection_1.tflite'

# exporting the model
model.export(export_dir=MODEL_PATH, tflite_filename=MODEL_NAME)

"""# Helper functions for image processing and object detection"""

import cv2
import numpy as np
import tensorflow as tf

# Define a list of colors for visualization
COLORS = np.random.randint(0, 255, size=(len(CLASSES), 3), dtype=np.uint8)

def preprocess_image(image_path, input_size):
  ''' Preprocess the input image to feed to the TFLite model
  '''
  img = tf.io.read_file(image_path)
  img = tf.io.decode_image(img, channels=3)
  img = tf.image.convert_image_dtype(img, tf.uint8)
  original_image = img
  resized_img = tf.image.resize(img, input_size)
  resized_img = resized_img[tf.newaxis, :]
  resized_img = tf.cast(resized_img, dtype=tf.uint8)
  return resized_img, original_image


def detect_objects(interpreter, image, threshold):
  ''' Returns a list of detection results, each a dictionary of object info.
  '''

  signature_fn = interpreter.get_signature_runner()

  # Feed the input image to the model
  output = signature_fn(images=image)

  # Get all outputs from the model
  count = int(np.squeeze(output['output_0']))
  scores = np.squeeze(output['output_1'])
  classes = np.squeeze(output['output_2'])
  boxes = np.squeeze(output['output_3'])

  results = []
  for i in range(count):
    if scores[i] >= threshold:
      result = {
        'bounding_box': boxes[i],
        'class_id': classes[i],
        'score': scores[i]
      }
      results.append(result)
  return results


def run_odt_and_draw_results(image_path, interpreter, threshold=0.5):
  ''' Run object detection on the input image and draw the detection results
  '''

  # Load the input shape required by the model
  _, input_height, input_width, _ = interpreter.get_input_details()[0]['shape']

  # Load the input image and preprocess it
  preprocessed_image, original_image = preprocess_image(
      image_path,
      (input_height, input_width)
    )

  # Run object detection on the input image
  results = detect_objects(interpreter, preprocessed_image, threshold=threshold)

  # Plot the detection results on the input image
  original_image_np = original_image.numpy().astype(np.uint8)
  for obj in results:
    # Convert the object bounding box from relative coordinates to absolute
    # coordinates based on the original image resolution
    ymin, xmin, ymax, xmax = obj['bounding_box']
    xmin = int(xmin * original_image_np.shape[1])
    xmax = int(xmax * original_image_np.shape[1])
    ymin = int(ymin * original_image_np.shape[0])
    ymax = int(ymax * original_image_np.shape[0])

    # Find the class index of the current object
    class_id = int(obj['class_id'])

    # Draw the bounding box and label on the image
    color = [int(c) for c in COLORS[class_id]]
    cv2.rectangle(original_image_np, (xmin, ymin), (xmax, ymax), color, 2)
    # Make adjustments to make the label visible for all objects
    y = ymin - 15 if ymin - 15 > 15 else ymin + 15
    label = "{}: {:.0f}%".format(CLASSES[class_id], obj['score'] * 100)
    cv2.putText(original_image_np, label, (xmin, y),
        cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

  # Return the final image
  original_uint8 = original_image_np.astype(np.uint8)
  return original_uint8

"""# Testing the model"""

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1213.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1214.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1229.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1347.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1380.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/val/1346.jpeg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/test/images-1.jpg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img



"""**Efficientdet 2**"""

# defining the model
spec = model_spec.get('efficientdet_lite2')

model = object_detector.create(train_data,
                               model_spec=spec,
                               batch_size=16,
                               train_whole_model=True,
                               epochs=50,
                               validation_data=val_data)

# evaluating the model
model.evaluate(val_data)

MODEL_PATH = '/content/drive/MyDrive/car_dataset/car_damage_detection_model'
MODEL_NAME = 'car_damage_detection_2.tflite'

# exporting the model
model.export(export_dir=MODEL_PATH, tflite_filename=MODEL_NAME)

import time
import os
import warnings
warnings.filterwarnings('ignore')

import tensorflow as tf
from PIL import Image

# from helper_functions import run_odt_and_draw_results
# import config

cwd = os.getcwd()

MODEL_PATH = MODEL_PATH
MODEL_NAME = MODEL_NAME

DETECTION_THRESHOLD = 0.3

# Change the test file path to your test image
INPUT_IMAGE_PATH = '/content/drive/MyDrive/car_dataset/test/images-1.jpg'

im = Image.open(INPUT_IMAGE_PATH)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(f'{cwd}/Object-Detection/result/input.png', 'PNG')

# print('Loading model...', end='')
start_time = time.time()

# Load the TFLite model
model_path = f'{MODEL_PATH}/{MODEL_NAME}'
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    f'{cwd}/Object-Detection/result/input.png',
    interpreter,
    threshold=DETECTION_THRESHOLD
)

end_time = time.time()
elapsed_time = end_time - start_time
# print('Done! Took {} seconds'.format(elapsed_time))

# Show the detection result
img = Image.fromarray(detection_result_image)
# img.save(f'{cwd}/Object-Detection/result/ouput.png')
img

